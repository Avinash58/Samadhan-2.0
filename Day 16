<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Online Store</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f6;
        }
        .product-card {
            transition: transform 0.2s, box-shadow 0.2s;
        }
        .product-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        }
    </style>
</head>
<body class="bg-gray-100 min-h-screen flex flex-col">

    <!-- Main Container -->
    <div class="flex flex-col flex-grow">
        <!-- Header -->
        <header class="bg-white shadow-md p-4 sticky top-0 z-50">
            <div class="container mx-auto flex justify-between items-center">
                <h1 class="text-3xl font-bold text-gray-800">
                    My Awesome Store
                </h1>
                <button id="cart-button" class="relative text-gray-600 hover:text-gray-800 transition-colors">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.182 1.76.707 1.76H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z" />
                    </svg>
                    <span id="cart-item-count" class="absolute top-0 right-0 inline-flex items-center justify-center px-2 py-1 text-xs font-bold leading-none text-red-100 transform translate-x-1/2 -translate-y-1/2 bg-red-600 rounded-full">0</span>
                </button>
            </div>
        </header>

        <!-- Product Catalog -->
        <main class="container mx-auto p-4 md:p-8 flex-grow">
            <h2 class="text-2xl font-semibold text-gray-700 mb-6">Our Products</h2>
            <div id="product-grid" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
                <!-- Product cards will be inserted here by JavaScript -->
            </div>
        </main>
    </div>

    <!-- Cart Modal -->
    <div id="cart-modal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50">
        <div class="bg-white rounded-lg shadow-xl p-6 w-full max-w-lg mx-4 md:mx-auto relative">
            <button id="close-cart-modal" class="absolute top-3 right-3 text-gray-500 hover:text-gray-700 transition-colors">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
            <h3 class="text-2xl font-bold mb-4">Your Shopping Cart</h3>
            <div id="cart-items" class="space-y-4 max-h-80 overflow-y-auto pr-2">
                <!-- Cart items will be inserted here by JavaScript -->
            </div>
            <div id="cart-summary" class="mt-6 pt-4 border-t-2 border-gray-200">
                <div class="flex justify-between items-center font-bold text-lg mb-2">
                    <span>Total:</span>
                    <span id="cart-total-price">$0.00</span>
                </div>
                <button id="checkout-button" class="w-full bg-blue-600 text-white font-bold py-3 px-4 rounded-lg hover:bg-blue-700 transition-colors">
                    Checkout
                </button>
            </div>
        </div>
    </div>

    <!-- Payment Modal -->
    <div id="payment-modal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50">
        <div class="bg-white rounded-lg shadow-xl p-6 w-full max-w-sm mx-4 md:mx-auto relative">
            <button id="close-payment-modal" class="absolute top-3 right-3 text-gray-500 hover:text-gray-700 transition-colors">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
            <h3 class="text-2xl font-bold mb-4">Payment Information</h3>
            <form id="payment-form" class="space-y-4">
                <div>
                    <label for="card-number" class="block text-sm font-medium text-gray-700">Card Number</label>
                    <input type="text" id="card-number" name="card-number" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" required>
                </div>
                <div>
                    <label for="expiry-date" class="block text-sm font-medium text-gray-700">Expiry Date (MM/YY)</label>
                    <input type="text" id="expiry-date" name="expiry-date" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" placeholder="MM/YY" required>
                </div>
                <div>
                    <label for="cvv" class="block text-sm font-medium text-gray-700">CVV</label>
                    <input type="text" id="cvv" name="cvv" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" required>
                </div>
                <button type="submit" class="w-full bg-green-600 text-white font-bold py-3 px-4 rounded-lg hover:bg-green-700 transition-colors">
                    Pay Now
                </button>
            </form>
        </div>
    </div>

    <!-- Confirmation Modal -->
    <div id="confirmation-modal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50">
        <div class="bg-white rounded-lg shadow-xl p-6 w-full max-w-sm mx-4 md:mx-auto text-center relative">
            <h3 id="confirmation-title" class="text-xl font-bold mb-2"></h3>
            <p id="confirmation-message" class="text-gray-700 mb-4"></p>
            <button id="close-confirmation-modal" class="bg-blue-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-blue-700 transition-colors">
                OK
            </button>
        </div>
    </div>


    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const productGrid = document.getElementById('product-grid');
            const cartButton = document.getElementById('cart-button');
            const cartModal = document.getElementById('cart-modal');
            const closeCartModalButton = document.getElementById('close-cart-modal');
            const cartItemsContainer = document.getElementById('cart-items');
            const cartTotalPrice = document.getElementById('cart-total-price');
            const checkoutButton = document.getElementById('checkout-button');
            const paymentModal = document.getElementById('payment-modal');
            const closePaymentModalButton = document.getElementById('close-payment-modal');
            const paymentForm = document.getElementById('payment-form');
            const confirmationModal = document.getElementById('confirmation-modal');
            const closeConfirmationModalButton = document.getElementById('close-confirmation-modal');
            const confirmationTitle = document.getElementById('confirmation-title');
            const confirmationMessage = document.getElementById('confirmation-message');
            const cartItemCount = document.getElementById('cart-item-count');

            // --- Product Data ---
            const products = [
                { id: 1, name: 'Wireless Headphones', price: 99.99, image: 'https://placehold.co/400x300/e2e8f0/000?text=Headphones', description: 'Experience crystal clear sound with these comfortable wireless headphones.' },
                { id: 2, name: 'Smartwatch', price: 199.50, image: 'https://placehold.co/400x300/d1d5db/000?text=Smartwatch', description: 'Track your fitness, notifications, and more with this sleek smartwatch.' },
                { id: 3, name: 'Portable Power Bank', price: 35.00, image: 'https://placehold.co/400x300/9ca3af/000?text=Power+Bank', description: 'Stay charged on the go with this high-capacity portable power bank.' },
                { id: 4, name: 'Gaming Mouse', price: 59.99, image: 'https://placehold.co/400x300/a3b18a/000?text=Gaming+Mouse', description: 'Gain the competitive edge with this ergonomic and responsive gaming mouse.' },
                { id: 5, name: 'Mechanical Keyboard', price: 125.00, image: 'https://placehold.co/400x300/94a3b8/000?text=Keyboard', description: 'A tactile and responsive keyboard for gamers and professionals alike.' },
                { id: 6, name: 'Webcam 1080p', price: 75.00, image: 'https://placehold.co/400x300/6b7280/000?text=Webcam', description: 'Clear and sharp video calls with a wide-angle lens and auto-focus.' },
                { id: 7, name: 'USB-C Hub', price: 45.00, image: 'https://placehold.co/400x300/4b5563/000?text=USB-C+Hub', description: 'Expand your laptop\'s connectivity with multiple ports in a single hub.' },
                { id: 8, name: 'Wireless Charger', price: 29.99, image: 'https://placehold.co/400x300/374151/000?text=Charger', description: 'Charge your phone effortlessly with this sleek wireless charging pad.' }
            ];

            // --- Cart State Management (using localStorage) ---
            let cart = JSON.parse(localStorage.getItem('cart')) || [];

            function saveCart() {
                localStorage.setItem('cart', JSON.stringify(cart));
            }

            // --- Rendering Functions ---
            function renderProducts() {
                productGrid.innerHTML = products.map(product => `
                    <div class="bg-white rounded-lg shadow-md overflow-hidden product-card">
                        <img src="${product.image}" onerror="this.onerror=null;this.src='https://placehold.co/400x300/e2e8f0/000?text=Image+Not+Found';" alt="${product.name}" class="w-full h-48 object-cover">
                        <div class="p-4">
                            <h3 class="text-xl font-bold text-gray-800">${product.name}</h3>
                            <p class="text-gray-600 mt-1">${product.description}</p>
                            <div class="mt-4 flex justify-between items-center">
                                <span class="text-2xl font-bold text-gray-900">$${product.price.toFixed(2)}</span>
                                <button data-id="${product.id}" class="add-to-cart-btn bg-blue-600 text-white py-2 px-4 rounded-full font-semibold hover:bg-blue-700 transition-colors focus:outline-none">
                                    Add to Cart
                                </button>
                            </div>
                        </div>
                    </div>
                `).join('');
            }

            function renderCart() {
                cartItemsContainer.innerHTML = '';
                let total = 0;
                if (cart.length === 0) {
                    cartItemsContainer.innerHTML = '<p class="text-gray-500 text-center">Your cart is empty.</p>';
                    checkoutButton.disabled = true;
                    checkoutButton.classList.add('opacity-50', 'cursor-not-allowed');
                } else {
                    checkoutButton.disabled = false;
                    checkoutButton.classList.remove('opacity-50', 'cursor-not-allowed');
                    cart.forEach(item => {
                        const product = products.find(p => p.id === item.id);
                        if (product) {
                            total += product.price * item.quantity;
                            cartItemsContainer.innerHTML += `
                                <div class="flex items-center gap-4 bg-gray-50 p-3 rounded-lg">
                                    <img src="${product.image}" onerror="this.onerror=null;this.src='https://placehold.co/60x60/e2e8f0/000?text=Product';" alt="${product.name}" class="w-16 h-16 rounded-lg object-cover">
                                    <div class="flex-grow">
                                        <h4 class="font-semibold text-gray-800">${product.name}</h4>
                                        <p class="text-gray-600 text-sm">$${product.price.toFixed(2)} x ${item.quantity}</p>
                                    </div>
                                    <span class="font-bold text-gray-900">$${(product.price * item.quantity).toFixed(2)}</span>
                                </div>
                            `;
                        }
                    });
                }
                cartTotalPrice.textContent = `$${total.toFixed(2)}`;
                cartItemCount.textContent = cart.reduce((count, item) => count + item.quantity, 0);
            }
            
            // --- Modal Functions ---
            function showModal(modal) {
                modal.classList.remove('hidden');
                document.body.classList.add('overflow-hidden');
            }

            function hideModal(modal) {
                modal.classList.add('hidden');
                document.body.classList.remove('overflow-hidden');
            }

            function showConfirmation(title, message) {
                confirmationTitle.textContent = title;
                confirmationMessage.textContent = message;
                showModal(confirmationModal);
            }

            // --- Event Listeners ---
            productGrid.addEventListener('click', (e) => {
                if (e.target.classList.contains('add-to-cart-btn')) {
                    const productId = parseInt(e.target.dataset.id);
                    const existingItem = cart.find(item => item.id === productId);
                    if (existingItem) {
                        existingItem.quantity++;
                    } else {
                        cart.push({ id: productId, quantity: 1 });
                    }
                    saveCart();
                    renderCart();
                    showConfirmation('Item Added!', 'Your product has been added to the cart.');
                }
            });

            cartButton.addEventListener('click', () => {
                showModal(cartModal);
            });

            closeCartModalButton.addEventListener('click', () => {
                hideModal(cartModal);
            });

            checkoutButton.addEventListener('click', () => {
                hideModal(cartModal);
                showModal(paymentModal);
            });

            closePaymentModalButton.addEventListener('click', () => {
                hideModal(paymentModal);
            });

            paymentForm.addEventListener('submit', (e) => {
                e.preventDefault();
                // Simulate payment processing
                hideModal(paymentModal);
                cart = []; // Empty the cart after successful payment
                saveCart();
                renderCart();
                showConfirmation('Payment Successful!', 'Thank you for your purchase. Your order has been placed.');
            });

            closeConfirmationModalButton.addEventListener('click', () => {
                hideModal(confirmationModal);
            });

            // --- Initial Render ---
            renderProducts();
            renderCart();
        });
    </script>
</body>
</html>
